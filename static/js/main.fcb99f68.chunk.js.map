{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","display","setDisplay","operationDisplay","setOperationDisplay","operationAnswer","setOperationAnswer","setDisplayWithEvent","event","newDisplay","target","value","operatorClicked","lastOperator","inputtedValue","slice","equalClicked","result","eval","clearClicked","className","map","number","id","onClick","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"m2BAIA,SAASA,MACP,cAA8BC,oDAAS,IAAvC,wMAAOC,QAAP,cAAgBC,WAAhB,cACA,WAAgDF,oDAAS,IAAzD,yMAAOG,iBAAP,cAAyBC,oBAAzB,cACA,WAA8CJ,oDAAS,GAAvD,yMAAOK,gBAAP,cAAwBC,mBAAxB,cACMC,oBAAsB,SAACC,GAC3B,IAAIC,EAAaR,QAAUO,EAAME,OAAOC,MACxCT,WAAWO,IAEPG,gBAAkB,SAACJ,GACvB,IAAIK,EAAeL,EAAME,OAAOC,MAC5BG,EAAgBb,QAGhBG,oBAFmB,GAAnBC,gBACmB,GAAjBS,EACkBX,iBAAiBY,MAAM,GAAI,GAAKF,EAEzB,IAApBV,iBACaW,EAAgBD,EAElBV,iBAAmBW,EAAgBD,EAGlC,GAAjBC,EACkBT,gBAAkBQ,EAElBV,iBAAmBW,EAAgBD,GAI3DX,WAAW,KAEPc,aAAe,SAAfA,eACJ,IAAIC,OAASC,KAAKf,iBAAmBF,SACrCC,WAAW,IACXE,oBAAoBD,iBAAmBF,SACvCK,mBAAmBW,SAGfE,aAAe,WACnBjB,WAAW,IACXE,oBAAoB,IACpBE,mBAAmB,IAErB,OAEE,kEAAKc,UAAU,MAAf,SACE,mEAAKA,UAAU,QAAf,UACG,CAAC,EAAG,EAAG,GAAGC,KAAI,SAACC,GAAD,OACb,qEAAQC,GAAG,SACXC,QAASjB,oBAAqBI,MAAOW,EADrC,SAC8CA,OAEhD,oEACC,CAAC,EAAG,EAAG,GAAGD,KAAI,SAACC,GAAD,OACb,qEAAQC,GAAG,SACXC,QAASjB,oBAAqBI,MAAOW,EADrC,SAC8CA,OAEhD,oEACC,CAAC,EAAG,EAAG,GAAGD,KAAI,SAACC,GAAD,OACb,qEAAQC,GAAG,SACXC,QAASjB,oBAAqBI,MAAOW,EADrC,SAC8CA,OAEhD,oEACC,CAAC,GAAGD,KAAI,SAACC,GAAD,OACP,qEAAQC,GAAG,SACXC,QAASjB,oBAAqBI,MAAOW,EADrC,SAC8CA,OAEhD,qEAAQC,GAAG,UAAUZ,MAAM,IAAIa,QAASL,aAAxC,eACA,qEAAQI,GAAG,UAAUZ,MAAM,IAAIa,QAASR,aAAxC,eACA,oEACA,qEAAQO,GAAG,UAAUZ,MAAM,IAAIa,QAASZ,gBAAxC,eACA,qEAAQW,GAAG,UAAUZ,MAAM,IAAIa,QAASZ,gBAAxC,eACA,qEAAQW,GAAG,UAAUZ,MAAM,IAAIa,QAASZ,gBAAxC,eACA,qEAAQW,GAAG,UAAUZ,MAAM,IAAIa,QAASZ,gBAAxC,eAEA,oEACA,oEAAOa,KAAK,OAAOd,MAAOV,UAC1B,oEACA,2FACaE,oBAEb,oEACA,yFACWE,wBAOJN,2B,gIChFA2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtC,EAAA,EAAD,MAEFuC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fcb99f68.chunk.js","sourcesContent":["import './App.scss';\nimport {useState} from 'react';\n\n\nfunction App() {\n  const [display, setDisplay] = useState(\"\");\n  const [operationDisplay, setOperationDisplay] = useState(\"\");\n  const [operationAnswer, setOperationAnswer] = useState(0);\n  const setDisplayWithEvent = (event) => {\n    let newDisplay = display + event.target.value;\n    setDisplay(newDisplay);\n  };\n  const operatorClicked = (event) => {\n    let lastOperator = event.target.value;\n    let inputtedValue = display;\n    if (operationAnswer == 0) {\n      if (inputtedValue == 0) {\n        setOperationDisplay(operationDisplay.slice(0, -1) + lastOperator);\n      }\n      else if (operationDisplay == \"\") {\n        setOperationDisplay(inputtedValue + lastOperator);\n      } else {\n      setOperationDisplay(operationDisplay + inputtedValue + lastOperator);\n      }\n    } else {\n      if (inputtedValue == 0) {\n        setOperationDisplay(operationAnswer + lastOperator)\n      } else {\n        setOperationDisplay(operationDisplay + inputtedValue + lastOperator)\n      }\n    }\n    \n    setDisplay(\"\");\n  };\n  const equalClicked = () => {\n    let result = eval(operationDisplay + display);\n    setDisplay(\"\");\n    setOperationDisplay(operationDisplay + display);\n    setOperationAnswer(result);\n \n  };\n  const clearClicked = () => {\n    setDisplay(\"\");\n    setOperationDisplay(\"\");\n    setOperationAnswer(0)\n  };\n  return (\n    \n    <div className=\"App\">\n      <div className=\"Child\">\n        {[1, 2, 3].map((number) => (\n          <button id=\"button\" \n          onClick={setDisplayWithEvent} value={number}>{number}</button>\n        ))}\n        <br />\n        {[4, 5, 6].map((number) => (\n          <button id=\"button\" \n          onClick={setDisplayWithEvent} value={number}>{number}</button>\n        ))}\n        <br />\n        {[7, 8, 9].map((number) => (\n          <button id=\"button\" \n          onClick={setDisplayWithEvent} value={number}>{number}</button>\n        ))}\n        <br />\n        {[0].map((number) => (\n          <button id=\"button\" \n          onClick={setDisplayWithEvent} value={number}>{number}</button>\n        ))}\n        <button id=\"button1\" value=\"C\" onClick={clearClicked}>C</button>\n        <button id=\"button2\" value=\"=\" onClick={equalClicked}>=</button>\n        <br />\n        <button id=\"button3\" value=\"+\" onClick={operatorClicked}>+</button>\n        <button id=\"button4\" value=\"-\" onClick={operatorClicked}>-</button>\n        <button id=\"button5\" value=\"*\" onClick={operatorClicked}>*</button>\n        <button id=\"button6\" value=\"/\" onClick={operatorClicked}>/</button>\n        \n        <br />\n        <input type=\"text\" value={display}></input>\n        <br />\n        <span>\n          Equation: {operationDisplay}\n        </span>\n        <br />\n        <span>\n          Answer: {operationAnswer}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}